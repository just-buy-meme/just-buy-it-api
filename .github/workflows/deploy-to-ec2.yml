name: Deploy to EC2 on main push

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get branch name
        id: branch-name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Extract metadata for Backend Docker image
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/just-buy-it-backend
          tags: |
            type=ref,event=branch
            type=sha,format=short

      - name: Extract metadata for Frontend Docker image
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/just-buy-it-frontend
          tags: |
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/just-buy-it-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/just-buy-it-backend:buildcache,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/just-buy-it-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/just-buy-it-frontend:buildcache,mode=max

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 디렉토리가 없으면 클론
            if [ ! -d ~/just-buy-it ]; then
              git clone git@github.com:just-buy-meme/just-buy-it.git ~/just-buy-it
            fi

            cd ~/just-buy-it

            # 브랜치가 로컬에 없으면 체크아웃
            git fetch origin feature/ci-pipeline-setup
            git checkout feature/ci-pipeline-setup || git checkout -b feature/ci-pipeline-setup origin/feature/ci-pipeline-setup
            git reset --hard origin/feature/ci-pipeline-setup

            # docker-compose 파일이 있는지 확인
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml 파일이 없습니다. 배포를 중단합니다."
              exit 1
            fi

            # 환경 변수 설정
            export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            export BRANCH_NAME=feature-ci-pipeline-setup

            # 환경 변수 파일이 없으면 새로 복사
            if [ ! -f .env ]; then
              cp .env.example .env
            fi
            
            # 환경 변수 업데이트 - echo 명령어로 변경
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "API_KEYS=${{ secrets.API_KEYS }}" >> .env
            
            # 배포 실행
            docker compose down || true
            
            # 배포 실행
            docker compose down || true
            docker compose pull
            docker compose up -d
